using System;
using System.IO;
using ClosedXML.Excel;
using System.Linq;

namespace test_salephone.Utilities
{

    // ƒê·ªãnh nghƒ©a l·ªõp TestCase ch·ª©a c√°c thu·ªôc t√≠nh c·∫ßn thi·∫øt


    public class ExcelReportHelper_Khoi
    {
        public class TestCase
        {
            public string Id { get; set; }
            public string data { get; set; }
            // B·∫°n c√≥ th·ªÉ b·ªï sung th√™m c√°c thu·ªôc t√≠nh kh√°c n·∫øu c·∫ßn
        }
        private static string filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "Report", "BDCLPM.xlsx");
        public static void WriteToExcel(string sheetName, string numberTest, string status, string actualResult = "")
        {
            if (!File.Exists(filePath))
            {
                Console.WriteLine($"‚ùå Kh√¥ng t√¨m th·∫•y file: {filePath}");
                return;
            }

            try
            {
                using (var workbook = new XLWorkbook(filePath))
                {
                    var worksheet = workbook.Worksheets.FirstOrDefault(ws => ws.Name == sheetName);
                    if (worksheet == null)
                    {
                        Console.WriteLine($"‚ùå Sheet '{sheetName}' kh√¥ng t·ªìn t·∫°i.");
                        return;
                    }

                    var row = worksheet.RowsUsed().Skip(8)
                                       .FirstOrDefault(r => r.Cell(1).GetValue<string>().Trim() == numberTest.Trim());

                    if (row != null)
                    {
                        row.Cell(8).Value = actualResult; // C·∫≠p nh·∫≠t Actual Result v√†o c·ªôt H
                        row.Cell(9).Value = status;       // C·∫≠p nh·∫≠t Status v√†o c·ªôt I

                        workbook.SaveAs(filePath);
                        Console.WriteLine($"‚úÖ ƒê√£ l∆∞u file Excel");
                    }
                    else
                    {
                        Console.WriteLine($"‚ùå Kh√¥ng t√¨m th·∫•y TestCase c√≥ ID {numberTest}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }
        }

         // H√†m ƒë·ªçc d·ªØ li·ªáu t·ª´ Excel v√† tr·∫£ v·ªÅ danh s√°ch c√°c TestCase
        public static List<TestCase> GetTestCases(string worksheetName)
        {
            var testCases = new List<TestCase>();

            using (var workbook = new XLWorkbook(filePath))
            {
                var worksheet = workbook.Worksheet(worksheetName);
                Console.WriteLine($"üìÇ ƒê·ªçc d·ªØ li·ªáu t·ª´ sheet: {worksheetName}");

                // Gi·∫£ s·ª≠ 8 d√≤ng ƒë·∫ßu l√† header, b·ªè qua ch√∫ng
                foreach (var row in worksheet.RowsUsed().Skip(1))
                {
                    // Gi·∫£ s·ª≠ c·ªôt 2 ch·ª©a ID v√† c·ªôt 10 ch·ª©a tr·∫°ng th√°i
                    string id = row.Cell(1).GetValue<string>();
                    string data = row.Cell(2).GetValue<string>();

                    var testCase = new TestCase
                    {
                        Id = id,
                        data = data
                    };

                    testCases.Add(testCase);
                }
            }

            return testCases;
        }

        public static IEnumerable<object[]> GetTestCasesForNUnit()
        {
            // S·ª≠ d·ª•ng t√™n sheet c·ªë ƒë·ªãnh "testCase_Duy"
            var testCases = GetTestCases("Testcase Anh Kh√¥i");
            foreach (var testCase in testCases)
            {
                yield return new object[] { testCase.Id, testCase.data };
            }
        }
    }
}
