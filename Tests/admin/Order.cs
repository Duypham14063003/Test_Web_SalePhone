using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using test_salephone.Helpers;
using OpenQA.Selenium.Support.UI;
using test_salephone.Utilities;
using System.Text.RegularExpressions;

namespace test_salephone.Tests
{
    [TestFixture]
    public class Order
    {
        private IWebDriver driver;
        private IWebElement element;

        [SetUp]
        public void Setup()
        {
            driver = new ChromeDriver();
            driver.Manage().Window.Maximize();
            driver.Navigate().GoToUrl("https://frontend-salephones.vercel.app/sign-in"); 

            // ƒêƒÉng nh·∫≠p
            driver.FindElement(By.XPath("//input[@placeholder='Email']")).SendKeys("sela@gmail.com");
            driver.FindElement(By.CssSelector("input[placeholder='Nh·∫≠p m·∫≠t kh·∫©u']")).SendKeys("123456");
            driver.FindElement(By.XPath("//button[.//span[text()='ƒêƒÉng nh·∫≠p']]")).Click();
            Thread.Sleep(3000);
            driver.FindElement(By.XPath("//img[@alt='avatar']")).Click();

            //V√†o trang qu·∫£n l√Ω ng∆∞·ªùi d√πng
            Thread.Sleep(2000);
            driver.FindElement(By.XPath("//p[contains(text(),'Qu·∫£n l√Ω h·ªá th·ªëng')]")).Click();
            Thread.Sleep(2000);
            IWebElement sanPhamMenu = driver.FindElement(By.XPath("//span[contains(text(),'ƒê∆°n h√†ng')]"));
            sanPhamMenu.Click();
            Thread.Sleep(10000);
        }

        [Test]
        [Description("Test Ki·ªÉm tra giao di·ªán ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_01", "Giao di·ªán hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß")]
        [TestCase("ID_Order_02", "Giao di·ªán hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß khi c√≥ 1 ƒë∆°n h√†ng")]
        [TestCase("ID_Order_03", "Kh√¥ng c√≥ ƒë∆°n n√†o ")]
        public void Test_ViewOrder(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                // Ki·ªÉm tra xem danh s√°ch ƒë∆°n h√†ng c√≥ hi·ªÉn th·ªã kh√¥ng
                IWebElement orderList = wait.Until(d => d.FindElement(By.XPath("//*[@id='root']/div/div/div/div/div[2]/div[2]/div/div[2]/div/div/div/div/div/div/div[2]")));
                if (orderList.Displayed)
                {
                    Console.WriteLine("‚úÖ Giao di·ªán hi·ªÉn th·ªã danh s√°ch ƒë∆°n h√†ng ƒë·∫ßy ƒë·ªß");
                    status = "Pass";
                }
                else
                {
                    Console.WriteLine("‚ùå Kh√¥ng t√¨m th·∫•y danh s√°ch ƒë∆°n h√†ng");
                }
                
                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            //Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            string testResultMessage = thongBao;
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, testResultMessage);
        }

        [Test]
        [Description("Test Ki·ªÉm tra giao di·ªán ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_04", "ƒê∆°n h√†ng hi·ªÉn th·ªã ƒë√∫ng v·ªõi d·ªØ li·ªáu")]
        public void Test_VerifyOrderQuantity(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                //L·∫•y s·ªë l∆∞·ª£ng ƒë∆°n h√†ng t·ª´ ti√™u ƒë·ªÅ (V√≠ d·ª•: "T·ªïng s·ªë l∆∞·ª£ng ƒë∆°n h√†ng: 113")
                string totalOrderText = driver.FindElement(By.XPath("//div[contains(text(),'T·ªïng s·ªë l∆∞·ª£ng ƒë∆°n h√†ng')]")).Text;
                string[] parts = totalOrderText.Split(':');

                if (parts.Length < 2 || string.IsNullOrWhiteSpace(parts[1]))
                {
                    throw new Exception("‚ö†Ô∏è L·ªñI: Kh√¥ng l·∫•y ƒë∆∞·ª£c s·ªë l∆∞·ª£ng ƒë∆°n h√†ng!");
                }

                if (!int.TryParse(parts[1].Trim(), out int totalOrderCount))
                {
                    throw new Exception($"‚ö†Ô∏è L·ªñI: Gi√° tr·ªã '{parts[1].Trim()}' kh√¥ng ph·∫£i s·ªë h·ª£p l·ªá!");
                }
                Console.WriteLine($"üìå T·ªïng s·ªë l∆∞·ª£ng ƒë∆°n h√†ng hi·ªÉn th·ªã: {totalOrderCount}");

                //ƒê·∫øm s·ªë l∆∞·ª£ng ƒë∆°n h√†ng th·ª±c t·∫ø b·∫±ng c√°ch duy·ªát qua t·ª´ng trang
                int actualOrderCount = 0;

                while (true)
                {
                    // Ki·ªÉm tra trang hi·ªán t·∫°i ƒë·ªÉ debug
                    var currentPage = driver.FindElement(By.XPath("//li[contains(@class,'ant-pagination-item-active')]")).Text;
                    Console.WriteLine($"üìå ƒêang ·ªü trang: {currentPage}");

                    // ƒê·∫øm s·ªë ƒë∆°n h√†ng tr√™n trang hi·ªán t·∫°i
                    List<IWebElement> orderRows = driver.FindElements(By.XPath("//tr[contains(@class, 'ant-table-row')]")).ToList();
                    actualOrderCount += orderRows.Count;

                    // Ki·ªÉm tra xem c√≥ th·ªÉ b·∫•m Next kh√¥ng
                    var nextPageButton = driver.FindElements(By.XPath("//li[contains(@class, 'ant-pagination-next') and not(contains(@class, 'ant-pagination-disabled'))]"));
                    
                    if (nextPageButton.Count > 0)
                    {
                        Console.WriteLine("üìå Chuy·ªÉn sang trang ti·∫øp theo...");
                        nextPageButton[0].Click();

                        // ƒê·ª£i trang t·∫£i xong
                        // WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(5));
                        // wait.Until(drv => drv.FindElement(By.XPath("//table//tbody//tr")));

                        Thread.Sleep(1000); // Ch·ªù th√™m 1s ƒë·ªÉ tr√°nh l·ªói hi·ªÉn th·ªã ch·∫≠m
                    }
                    else
                    {
                        Console.WriteLine("‚úÖ ƒê√£ duy·ªát h·∫øt t·∫•t c·∫£ c√°c trang.");
                        break; // Tho√°t v√≤ng l·∫∑p khi kh√¥ng c√≤n n√∫t Next
                    }
                }


                Console.WriteLine($"üìå S·ªë ƒë∆°n h√†ng th·ª±c t·∫ø sau khi duy·ªát t·∫•t c·∫£ trang: {actualOrderCount}");

                // So s√°nh hai s·ªë v√† in k·∫øt qu·∫£
                if (totalOrderCount == actualOrderCount)
                {
                    Console.WriteLine("‚úÖ D·ªØ li·ªáu ƒë√∫ng: S·ªë l∆∞·ª£ng ƒë∆°n h√†ng hi·ªÉn th·ªã kh·ªõp v·ªõi s·ªë ƒë∆°n h√†ng th·ª±c t·∫ø.");
                    status = "Pass";
                }
                else
                {
                    Console.WriteLine($"‚ùå L·ªñI: S·ªë ƒë∆°n h√†ng hi·ªÉn th·ªã ({totalOrderCount}) KH√îNG kh·ªõp v·ªõi s·ªë ƒë∆°n h√†ng th·ª±c t·∫ø ({actualOrderCount}).");
                }
                
                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            //Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            string testResultMessage = thongBao;
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, testResultMessage);
        }

        [Test]
        [Description("Test Ki·ªÉm tra giao di·ªán ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_05", "Hi·ªÉn th·ªã ƒë√∫ng danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng")]
        public void Test_ManyproductsinOrder(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                // Ch·ªçn ƒë∆°n h√†ng ƒë·∫ßu ti√™n ƒë·ªÉ m·ªü chi ti·∫øt
                driver.FindElement(By.XPath("//button[@type='button' and @class='ant-table-row-expand-icon ant-table-row-expand-icon-collapsed' and @aria-label='Expand row' and @aria-expanded='false']")).Click();
                Thread.Sleep(3000); 

                // L·∫•y danh s√°ch s·∫£n ph·∫©m trong chi ti·∫øt ƒë∆°n h√†ng
                var productElements = driver.FindElements(By.XPath("//*[@id='root']/div/div/div/div/div[2]/div[2]/div/div[2]/div/div/div/div/div/div/div[2]/div[2]/table/tbody/tr[3]/td/div/div/div[2]"));
                List<string> displayedProducts = productElements.Select(el => el.Text.Trim()).ToList();

                // In danh s√°ch s·∫£n ph·∫©m ra console
                Console.WriteLine("Danh s√°ch s·∫£n ph·∫©m hi·ªÉn th·ªã trong ƒë∆°n h√†ng:");
                displayedProducts.ForEach(product => Console.WriteLine($"- {product}"));

                // Ki·ªÉm tra danh s√°ch kh√¥ng r·ªóng
                if (displayedProducts.Count > 0)
                {
                    Console.WriteLine("Danh s√°ch s·∫£n ph·∫©m hi·ªÉn th·ªã ƒë√∫ng.");
                    status = "Pass";
                }
                else
                {
                    Console.WriteLine("L·ªñI: Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o hi·ªÉn th·ªã trong ƒë∆°n h√†ng!");
                }
                
                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            //Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            string testResultMessage = thongBao;
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, testResultMessage);
        }

        [Test]
        [Description("Test Ki·ªÉm tra ch·ªânh s·ª≠a ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_06", "Tr·∫°ng th√°i t√¨nh tr·∫°ng ƒë∆°n h√†ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng")]
        public void Test_Update_StatusOrder(String testCaseID, String thongBao)
        {
            string status = "Fail";
            IWebElement orderRow = null;
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒêang x·ª≠ l√Ω", duy·ªát qua c√°c trang n·∫øu c·∫ßn
                while (true)
                {
                    try
                    {
                        orderRow = driver.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒêang x·ª≠ l√Ω']"));
                        if (orderRow != null)
                        {
                            Console.WriteLine("‚úÖ T√¨m th·∫•y ƒë∆°n h√†ng 'ƒêang x·ª≠ l√Ω'");
                            break;
                        }
                    }
                    catch (NoSuchElementException)
                    {
                        // Ki·ªÉm tra n√∫t next c√≥ kh·∫£ d·ª•ng kh√¥ng
                        var nextPageButton = driver.FindElements(By.XPath("//li[contains(@class, 'ant-pagination-next') and not(contains(@class, 'ant-pagination-disabled'))]"));
                        if (nextPageButton.Count > 0)
                        {
                            Console.WriteLine("üìå Kh√¥ng t√¨m th·∫•y tr√™n trang n√†y, chuy·ªÉn sang trang ti·∫øp theo...");
                            nextPageButton[0].Click();
                            Thread.Sleep(2000);
                        }
                        else
                        {
                            Console.WriteLine("‚ùå Kh√¥ng c√≥ ƒë∆°n h√†ng 'ƒêang x·ª≠ l√Ω' tr√™n t·∫•t c·∫£ c√°c trang.");
                            return;
                        }
                    }
                }

                // Nh·∫•n v√†o tr·∫°ng th√°i "ƒêang x·ª≠ l√Ω" ƒë·ªÉ m·ªü dropdown
                var statusButton = orderRow.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒêang x·ª≠ l√Ω']")); 
                statusButton.Click();
                Thread.Sleep(1000);

                // Ch·ªçn "ƒêang giao h√†ng" t·ª´ danh s√°ch dropdown
                driver.FindElement(By.XPath("//li[contains(@class, 'ant-dropdown-menu-item') and contains(@class, 'ant-dropdown-menu-item-only-child') and @role='menuitem']//span[text()='ƒêang giao h√†ng']"))?.Click();
                status = "Pass";
                Thread.Sleep(1000);
                
                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            //Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            string testResultMessage = thongBao;
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, testResultMessage);
        }

        [Test]
        [Description("Test Ki·ªÉm tra ch·ªânh s·ª≠a ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_07", "Tr·∫°ng th√°i thanh to√°n ƒë∆°n h√†ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng")]
        public void Test_Update_PaymentOrder(String testCaseID, String thongBao)
        {
            string status = "Fail";
            IWebElement orderRow = null;
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "Ch∆∞a thanh to√°n", duy·ªát qua c√°c trang n·∫øu c·∫ßn
                while (true)
                {
                    try
                    {
                        orderRow = driver.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='Ch∆∞a thanh to√°n']"));
                        if (orderRow != null)
                        {
                            Console.WriteLine("‚úÖ T√¨m th·∫•y ƒë∆°n h√†ng 'Ch∆∞a thanh to√°n'");
                            break;
                        }
                    }
                    catch (NoSuchElementException)
                    {
                        // Ki·ªÉm tra n√∫t next c√≥ kh·∫£ d·ª•ng kh√¥ng
                        var nextPageButton = driver.FindElements(By.XPath("//li[contains(@class, 'ant-pagination-next') and not(contains(@class, 'ant-pagination-disabled'))]"));
                        if (nextPageButton.Count > 0)
                        {
                            Console.WriteLine("üìå Kh√¥ng t√¨m th·∫•y tr√™n trang n√†y, chuy·ªÉn sang trang ti·∫øp theo...");
                            nextPageButton[0].Click();
                            Thread.Sleep(2000);
                        }
                        else
                        {
                            Console.WriteLine("‚ùå Kh√¥ng c√≥ ƒë∆°n h√†ng 'ƒêang x·ª≠ l√Ω' tr√™n t·∫•t c·∫£ c√°c trang.");
                            return;
                        }
                    }
                }

                // Nh·∫•n v√†o tr·∫°ng th√°i "Ch∆∞a thanh to√°n" ƒë·ªÉ m·ªü dropdown
                var statusButton = orderRow.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='Ch∆∞a thanh to√°n']")); 
                statusButton.Click();
                Thread.Sleep(1000);

                // Ch·ªçn "ƒê√£ thanh to√°n" t·ª´ danh s√°ch dropdown
                driver.FindElement(By.XPath("//li[contains(@class, 'ant-dropdown-menu-item') and contains(@class, 'ant-dropdown-menu-item-only-child') and @role='menuitem']//span[text()='ƒê√£ thanh to√°n']"))?.Click();
                status = "Pass";
                Thread.Sleep(1000);
                
                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            //Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            string testResultMessage = thongBao;
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, testResultMessage);
        }

        [Test]
        [Description("Test Ki·ªÉm tra ch·ªânh s·ª≠a ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_08", new string[] {
            "Popup (dropdown) xu·∫•t hi·ªán ngay b√™n d∆∞·ªõi tr·∫°ng th√°i hi·ªán t·∫°i",
            "popup hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß c√°c tr·∫°ng th√°i",
            "ƒê∆°n h√†ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë√∫ng khi ch·ªçn tr·∫°ng th√°i m·ªõi",
            "Tr·∫°ng th√°i kh√¥ng thay ƒë·ªïi khi nh·∫•p ngo√†i popup"})]
        public void Test_Popup_StatusOrder(String testCaseID, string[] thongBaoList)
        {
            string status = "Fail";
            IWebElement orderRow = null;
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin")
                    .FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                while (true)
                {
                    try
                    {
                        // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒêang giao h√†ng"
                        orderRow = driver.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒêang giao h√†ng']"));

                        Console.WriteLine("‚úÖ ƒê√£ t√¨m th·∫•y ƒë∆°n h√†ng 'ƒêang giao h√†ng'");
                        break;
                    }
                    catch (NoSuchElementException)
                    {
                        var nextPageButton = driver.FindElements(By.XPath("//li[contains(@class, 'ant-pagination-next') and not(contains(@class, 'ant-pagination-disabled'))]"));

                        if (nextPageButton.Count > 0)
                        {
                            Console.WriteLine("‚è© Kh√¥ng t√¨m th·∫•y tr√™n trang n√†y, chuy·ªÉn sang trang ti·∫øp theo...");
                            nextPageButton[0].Click();
                            Thread.Sleep(2000);
                        }
                        else
                        {
                            Console.WriteLine("‚ùå Kh√¥ng c√≥ ƒë∆°n h√†ng 'ƒêang giao h√†ng' tr√™n t·∫•t c·∫£ c√°c trang.");
                            return;
                        }
                    }
                }

                // Nh·∫•n v√†o tr·∫°ng th√°i ƒë·ªÉ m·ªü dropdown
                var statusButton = orderRow.FindElement(By.XPath(
                    "//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒêang giao h√†ng']"));
                statusButton.Click();
                Thread.Sleep(2000);

                // L·∫•y danh s√°ch tr·∫°ng th√°i t·ª´ popup
                var statusOptions = driver.FindElements(By.XPath(
                    "//div[contains(@class, 'ant-dropdown')]//ul[contains(@class, 'ant-dropdown-menu')]/li"));

                Console.WriteLine($"S·ªë l∆∞·ª£ng tr·∫°ng th√°i t√¨m th·∫•y: {statusOptions.Count}");

                var expectedStatuses = new[] { "ƒêang giao h√†ng", "ƒê√£ giao h√†ng", "ƒêang x·ª≠ l√Ω", "ƒê√£ h·ªßy" };
                foreach (var option in statusOptions)
                {
                    string optionText = option.Text.Trim();
                    Console.WriteLine($"Tr·∫°ng th√°i h·ª£p l·ªá: {optionText}");
                }

                Thread.Sleep(2000);

                // Ch·ªçn m·ªôt tr·∫°ng th√°i kh√°c
                var newStatusOption = statusOptions.FirstOrDefault(option => option.Text.Trim() == "ƒê√£ giao h√†ng");
                if (newStatusOption != null)
                {
                    newStatusOption.Click();
                    Console.WriteLine("‚úÖ ƒê√£ ch·ªçn tr·∫°ng th√°i 'ƒê√£ giao h√†ng'.");
                }
                else
                {
                    Console.WriteLine("‚ùå Kh√¥ng t√¨m th·∫•y tr·∫°ng th√°i 'ƒê√£ giao h√†ng'! Ki·ªÉm tra l·∫°i danh s√°ch tr·∫°ng th√°i.");
                    return;
                }
                Thread.Sleep(2000);

                // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng sau khi ch·ªçn
                var updatedStatus = driver.FindElement(By.XPath("//td[@class='ant-table-cell ant-table-cell-fix-left ant-table-cell-row-hover']//button[@type='button']"));
                if (updatedStatus != null)
                    Console.WriteLine("‚úÖ Tr·∫°ng th√°i ƒë∆°n h√†ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë√∫ng: ƒê√£ giao h√†ng.");
                else
                    Console.WriteLine("‚ùå Tr·∫°ng th√°i ƒë∆°n h√†ng kh√¥ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
                Thread.Sleep(2000);

                // Ki·ªÉm tra popup c√≥ ƒë√≥ng khi nh·∫•p ra ngo√†i kh√¥ng
                var bodyElement = driver.FindElement(By.TagName("body"));
                bodyElement.Click();
                Console.WriteLine("üñ±Ô∏è ƒê√£ nh·∫•p ra ngo√†i popup.");
                Thread.Sleep(2000);
                if (!statusButton.Displayed)
                    Console.WriteLine("‚úÖ Popup ƒë√£ ƒë√≥ng ƒë√∫ng c√°ch.");
                else
                    Console.WriteLine("‚ùå Popup kh√¥ng ƒë√≥ng ƒë√∫ng c√°ch!");

                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
                status = "Pass";
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            foreach (var thongBao in thongBaoList)
            {
                string allMessages = string.Join("\n", thongBaoList);
                ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
            }
        }

        [Test]
        [Description("Test S·∫Øp x·∫øp ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_09", "M√£ ƒë∆°n h√†ng", "Danh s√°ch ƒë∆°n h√†ng kh√¥ng ƒë∆∞·ª£c s·∫Øp x·∫øp")]
        [TestCase("ID_Order_15", "Ng√†y ƒë·∫∑t", "Danh s√°ch ƒë∆°n h√†ng kh√¥ng ƒë∆∞·ª£c s·∫Øp x·∫øp")]
        [TestCase("ID_Order_16", "Ph√≠ giao h√†ng", "Danh s√°ch ƒë∆°n h√†ng kh√¥ng ƒë∆∞·ª£c s·∫Øp x·∫øp")]
        public void Test_Sort_Orderlist_Fail(String testCaseID, String columnName, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                var tableContainer = driver.FindElement(By.XPath("//div[contains(@class, 'ant-table-body')]"));

                // Cu·ªôn d·ªçc n·∫øu c·∫ßn
                long scrollHeight = (long)((IJavaScriptExecutor)driver).ExecuteScript("return arguments[0].scrollHeight;", tableContainer);
                int clientHeight = (int)(long)((IJavaScriptExecutor)driver).ExecuteScript("return arguments[0].clientHeight;", tableContainer);

                if (scrollHeight > clientHeight)
                {
                    ((IJavaScriptExecutor)driver).ExecuteScript("arguments[0].scrollTop = arguments[0].scrollHeight;", tableContainer);
                    Thread.Sleep(3000); // ƒê·ª£i ƒë·ªÉ cu·ªôn ho√†n t·∫•t
                }

                // Cu·ªôn ngang n·∫øu c·∫ßn
                long scrollWidth = (long)((IJavaScriptExecutor)driver).ExecuteScript("return arguments[0].scrollWidth;", tableContainer);
                int clientWidth = (int)(long)((IJavaScriptExecutor)driver).ExecuteScript("return arguments[0].clientWidth;", tableContainer);

                if (scrollWidth > clientWidth)
                {
                    ((IJavaScriptExecutor)driver).ExecuteScript("arguments[0].scrollLeft = arguments[0].scrollWidth;", tableContainer);
                    Thread.Sleep(3000); // ƒê·ª£i ƒë·ªÉ cu·ªôn ho√†n t·∫•t
                }

                // Nh·∫•p v√†o ti√™u ƒë·ªÅ c·ªôt ƒë·ªÉ s·∫Øp x·∫øp
                var columnHeader = driver.FindElement(By.XPath($"//th[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-column-has-sorters') and .//span[text()='{columnName}']]"));
                columnHeader.Click();
                Thread.Sleep(3000);

                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }

                // Ki·ªÉm tra k·∫øt qu·∫£ th·ª±c t·∫ø
                var sortedOrders = driver.FindElements(By.XPath("//table//tr/td[1]")); // L·∫•y danh s√°ch ƒë∆°n h√†ng
                List<string> actualOrderList = sortedOrders.Select(order => order.Text).ToList();

                // Ki·ªÉm tra xem danh s√°ch c√≥ ƒë∆∞·ª£c s·∫Øp x·∫øp ƒë√∫ng kh√¥ng
                List<string> expectedOrderList = new List<string>(actualOrderList);
                expectedOrderList.Sort(); // S·∫Øp x·∫øp theo th·ª© t·ª± mong mu·ªën

                if (actualOrderList.SequenceEqual(expectedOrderList))
                {
                    status = "Pass"; // N·∫øu ƒë√∫ng th√¨ test pass
                    thongBao = "Danh s√°ch ƒë∆°n h√†ng ƒë∆∞·ª£c s·∫Øp x·∫øp"; // C·∫≠p nh·∫≠t th√¥ng b√°o
                }
                else
                {
                    status = "Fail"; // N·∫øu sai th√¨ test fail
                    thongBao = "Danh s√°ch ƒë∆°n h√†ng kh√¥ng ƒë∆∞·ª£c s·∫Øp x·∫øp"; // C·∫≠p nh·∫≠t th√¥ng b√°o
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Test S·∫Øp x·∫øp ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_10", "T√¨nh tr·∫°ng", "Danh s√°ch ƒë∆°n h√†ng ƒë∆∞·ª£c s·∫Øp x·∫øp")]
        [TestCase("ID_Order_11", "Thanh to√°n", "Danh s√°ch ƒë∆°n h√†ng ƒë∆∞·ª£c s·∫Øp x·∫øp")]
        [TestCase("ID_Order_12", "T√™n ng∆∞·ªùi mua", "Danh s√°ch ƒë∆°n h√†ng ƒë∆∞·ª£c s·∫Øp x·∫øp")]
        [TestCase("ID_Order_13", "Ph∆∞∆°ng th·ª©c thanh to√°n", "Danh s√°ch ƒë∆°n h√†ng ƒë∆∞·ª£c s·∫Øp x·∫øp")]
        [TestCase("ID_Order_14", "T·ªïng ti·ªÅn ƒë∆°n h√†ng", "Danh s√°ch ƒë∆°n h√†ng ƒë∆∞·ª£c s·∫Øp x·∫øp")]
        [TestCase("ID_Order_17", "ƒê·ªãa ch·ªâ", "Danh s√°ch ƒë∆°n h√†ng ƒë∆∞·ª£c s·∫Øp x·∫øp")]
        [TestCase("ID_Order_18", "Th√†nh ph·ªë", "Danh s√°ch ƒë∆°n h√†ng ƒë∆∞·ª£c s·∫Øp x·∫øp")]
        public void Test_Sort_Orderlist_Pass(String testCaseID, String columnName, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                var tableContainer = driver.FindElement(By.XPath("//div[contains(@class, 'ant-table-body')]"));

                // Cu·ªôn d·ªçc n·∫øu c·∫ßn
                long scrollHeight = (long)((IJavaScriptExecutor)driver).ExecuteScript("return arguments[0].scrollHeight;", tableContainer);
                int clientHeight = (int)(long)((IJavaScriptExecutor)driver).ExecuteScript("return arguments[0].clientHeight;", tableContainer);

                if (scrollHeight > clientHeight)
                {
                    ((IJavaScriptExecutor)driver).ExecuteScript("arguments[0].scrollTop = arguments[0].scrollHeight;", tableContainer);
                    Thread.Sleep(3000); // ƒê·ª£i ƒë·ªÉ cu·ªôn ho√†n t·∫•t
                }

                // Cu·ªôn ngang n·∫øu c·∫ßn
                long scrollWidth = (long)((IJavaScriptExecutor)driver).ExecuteScript("return arguments[0].scrollWidth;", tableContainer);
                int clientWidth = (int)(long)((IJavaScriptExecutor)driver).ExecuteScript("return arguments[0].clientWidth;", tableContainer);

                if (scrollWidth > clientWidth)
                {
                    ((IJavaScriptExecutor)driver).ExecuteScript("arguments[0].scrollLeft = arguments[0].scrollWidth;", tableContainer);
                    Thread.Sleep(3000); // ƒê·ª£i ƒë·ªÉ cu·ªôn ho√†n t·∫•t
                }

                // Nh·∫•p v√†o ti√™u ƒë·ªÅ c·ªôt ƒë·ªÉ s·∫Øp x·∫øp
                var columnHeader = driver.FindElement(By.XPath($"//th[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-column-has-sorters') and .//span[text()='{columnName}']]"));
                columnHeader.Click();
                status = "Pass";
                Thread.Sleep(3000);

                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Test Ph√¢n trang ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_19", "Hi·ªÉn th·ªã ƒë√∫ng")]
        public void Test_CheckOrdersPerPageAndSelectAnyPage(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                // H√†m ƒë·∫øm s·ªë l∆∞·ª£ng ƒë∆°n h√†ng hi·ªÉn th·ªã trong b·∫£ng
                int CountOrdersOnPage()
                {
                    return driver.FindElements(By.CssSelector("table tbody tr")).Count;
                }

                // Ki·ªÉm tra s·ªë l∆∞·ª£ng ƒë∆°n h√†ng tr√™n trang ƒë·∫ßu ti√™n
                int firstPageCount = CountOrdersOnPage();
                Console.WriteLine($"S·ªë ƒë∆°n h√†ng tr√™n trang 1: {firstPageCount}");
                Console.WriteLine(firstPageCount == 10 ? "Trang 1 hi·ªÉn th·ªã ƒë√∫ng 10 ƒë∆°n h√†ng." : "Trang 1 hi·ªÉn th·ªã sai s·ªë l∆∞·ª£ng ƒë∆°n h√†ng!");

                // Chuy·ªÉn sang trang 2 b·∫±ng n√∫t next
                driver.FindElement(By.XPath("//span[@aria-label='right']//*[name()='svg']")).Click();
                Thread.Sleep(3000);

                // Ki·ªÉm tra s·ªë l∆∞·ª£ng ƒë∆°n h√†ng tr√™n trang 2
                int secondPageCount = CountOrdersOnPage();
                Console.WriteLine($"S·ªë ƒë∆°n h√†ng tr√™n trang 2: {secondPageCount}");
                Console.WriteLine(secondPageCount == 10 ? "Trang 2 hi·ªÉn th·ªã ƒë√∫ng 10 ƒë∆°n h√†ng." : "Trang 2 hi·ªÉn th·ªã sai s·ªë l∆∞·ª£ng ƒë∆°n h√†ng!");

                // Chuy·ªÉn sang trang s·ªë 3 b·∫±ng c√°ch nh·∫•p v√†o s·ªë trang
                driver.FindElement(By.XPath("//a[normalize-space()='3']")).Click();
                Thread.Sleep(3000);

                // Ki·ªÉm tra s·ªë l∆∞·ª£ng ƒë∆°n h√†ng tr√™n trang 3
                int thirdPageCount = CountOrdersOnPage();
                Console.WriteLine($"S·ªë ƒë∆°n h√†ng tr√™n trang 3: {thirdPageCount}");
                Console.WriteLine(thirdPageCount == 10 ? "Trang 3 hi·ªÉn th·ªã ƒë√∫ng 10 ƒë∆°n h√†ng." : "Trang 3 hi·ªÉn th·ªã sai s·ªë l∆∞·ª£ng ƒë∆°n h√†ng!");
                status ="Pass";
                
                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            //Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            string testResultMessage = thongBao;
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, testResultMessage);
        }

        [Test]
        [Description("Test Ph√¢n trang ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_20", "Hi·ªÉn th·ªã ƒë√∫ng")]
        public void Test_Verify8Orders(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                try
                {
                    // L·∫•y t·ªïng s·ªë ƒë∆°n h√†ng t·ª´ ph·∫ßn t·ª≠ hi·ªÉn th·ªã "T·ªïng s·ªë l∆∞·ª£ng ƒë∆°n h√†ng"
                    var totalOrdersText = driver.FindElement(By.XPath("//div[@class='ant-table-title']//div[1]")).Text;
                    int totalOrders = int.Parse(totalOrdersText.Split(':')[1].Trim());
                    Console.WriteLine($"T·ªïng s·ªë ƒë∆°n h√†ng: {totalOrders}");

                    // T√≠nh t·ªïng s·ªë trang d·ª±a tr√™n 10 ƒë∆°n h√†ng/trang
                    int ordersPerPage = 10;
                    int totalPages = (int)Math.Ceiling((double)totalOrders / ordersPerPage);
                    Console.WriteLine($"T·ªïng s·ªë trang: {totalPages}");

                    // X√°c minh r·∫±ng ch·ªâ c√≥ 1 trang hi·ªÉn th·ªã t·∫•t c·∫£ c√°c ƒë∆°n h√†ng
                    if (totalPages == 1)
                    {
                        // ƒê·∫øm s·ªë l∆∞·ª£ng ƒë∆°n h√†ng tr√™n trang
                        var orders = driver.FindElements(By.XPath("//tr[contains(@class, 'ant-table-row')]"));
                        Console.WriteLine($"S·ªë l∆∞·ª£ng ƒë∆°n h√†ng tr√™n trang ƒë·∫ßu ti√™n: {orders.Count}");

                        // Ki·ªÉm tra xem s·ªë l∆∞·ª£ng ƒë∆°n h√†ng c√≥ kh·ªõp v·ªõi t·ªïng ƒë∆°n h√†ng hay kh√¥ng
                        if (orders.Count == totalOrders)
                        {
                            Console.WriteLine("T·∫•t c·∫£ ƒë∆°n h√†ng ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n m·ªôt trang.");
                            status ="Pass";
                        }
                        else
                        {
                            Console.WriteLine($"L·ªñI: S·ªë l∆∞·ª£ng ƒë∆°n h√†ng tr√™n trang kh√¥ng kh·ªõp: {orders.Count} (mong ƒë·ª£i {totalOrders}).");
                        }
                    }
                    else
                    {
                        Console.WriteLine($"L·ªñI: C√≥ nhi·ªÅu h∆°n 1 trang m·∫∑c d√π t·ªïng ƒë∆°n h√†ng l√† {totalOrders}.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"C√≥ l·ªói x·∫£y ra: {ex.Message}");
                }
                
                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            //Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            string testResultMessage = thongBao;
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, testResultMessage);
        }

        [Test]
        [Description("Test Ph√¢n trang ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_21", "HI·ªÉn th·ªã ƒë√∫ng")]
        [TestCase("ID_Order_22", "Hi·ªÉn th·ªã ƒë√∫ng")]
        public void Test_ButtonNextPrevious(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                try
                {
                    // L·∫•y t·ªïng s·ªë ƒë∆°n h√†ng t·ª´ ph·∫ßn t·ª≠ hi·ªÉn th·ªã "T·ªïng s·ªë l∆∞·ª£ng ƒë∆°n h√†ng"
                    var totalOrdersText = driver.FindElement(By.XPath("//div[@class='ant-table-title']//div[1]")).Text;
                    int totalOrders = int.Parse(totalOrdersText.Split(':')[1].Trim());
                    Console.WriteLine($"T·ªïng s·ªë ƒë∆°n h√†ng: {totalOrders}");

                    // Ki·ªÉm tra t·ªïng s·ªë trang (v·ªõi 10 ƒë∆°n/trang)
                    int ordersPerPage = 10;
                    int totalPages = (int)Math.Ceiling((double)totalOrders / ordersPerPage);
                    Console.WriteLine($"T·ªïng s·ªë trang: {totalPages}");

                    if (totalPages > 1)
                    {
                        // Ki·ªÉm tra n√∫t "Next" ho·∫°t ƒë·ªông ƒë√∫ng
                        for (int currentPage = 1; currentPage < totalPages; currentPage++)
                        {
                            // L·∫•y ch·ªâ s·ªë trang hi·ªán t·∫°i
                            var currentPageNumber = driver.FindElement(By.XPath("//li[contains(@class, 'ant-pagination-item-active')]")).Text;
                            Console.WriteLine($"Trang hi·ªán t·∫°i: {currentPageNumber}");

                            // Nh·∫•n n√∫t "Next"
                            driver.FindElement(By.XPath("//span[@aria-label='right']//*[name()='svg']")).Click();
                            Thread.Sleep(2000); // ƒê·ª£i trang ti·∫øp theo t·∫£i

                            // Ki·ªÉm tra trang ƒë√£ chuy·ªÉn ƒë·∫øn trang k·∫ø ti·∫øp
                            var newPageNumber = driver.FindElement(By.XPath("//li[contains(@class, 'ant-pagination-item-active')]")).Text;
                            Console.WriteLine($"Chuy·ªÉn ƒë·∫øn trang: {newPageNumber}");
                            if (int.Parse(newPageNumber) != currentPage + 1)
                            {
                                Console.WriteLine("L·ªñI: N√∫t 'Next' kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng.");
                                return;
                            }
                        }

                        // Ki·ªÉm tra n√∫t "Previous" ho·∫°t ƒë·ªông ƒë√∫ng
                        for (int currentPage = totalPages; currentPage > 1; currentPage--)
                        {
                            // L·∫•y ch·ªâ s·ªë trang hi·ªán t·∫°i
                            var currentPageNumber = driver.FindElement(By.XPath("//li[contains(@class, 'ant-pagination-item-active')]")).Text;
                            Console.WriteLine($"Trang hi·ªán t·∫°i: {currentPageNumber}");

                            // Nh·∫•n n√∫t "Previous"
                            driver.FindElement(By.XPath("//span[@aria-label='left']//*[name()='svg']")).Click();
                            Thread.Sleep(2000); // ƒê·ª£i trang tr∆∞·ªõc ƒë√≥ t·∫£i

                            // Ki·ªÉm tra trang ƒë√£ chuy·ªÉn v·ªÅ trang tr∆∞·ªõc ƒë√≥
                            var newPageNumber = driver.FindElement(By.XPath("//li[contains(@class, 'ant-pagination-item-active')]")).Text;
                            Console.WriteLine($"Chuy·ªÉn ƒë·∫øn trang: {newPageNumber}");
                            if (int.Parse(newPageNumber) != currentPage - 1)
                            {
                                Console.WriteLine("L·ªñI: N√∫t 'Previous' kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng.");
                                return;
                            }
                        }

                        Console.WriteLine("N√∫t 'Next' v√† 'Previous' ho·∫°t ƒë·ªông ƒë√∫ng.");
                        status ="Pass";
                    }
                    else
                    {
                        Console.WriteLine("Ch·ªâ c√≥ 1 trang, kh√¥ng c·∫ßn ki·ªÉm tra n√∫t Next/Previous.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"C√≥ l·ªói x·∫£y ra: {ex.Message}");
                }

                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Test Ph√¢n trang ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_23", "HI·ªÉn th·ªã ƒë√∫ng")]
        [TestCase("ID_Order_24", "Hi·ªÉn th·ªã ƒë√∫ng")]
        public void Test_PreviousNextButton(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                try
            {
                // Ki·ªÉm tra n√∫t Previous khi ·ªü trang ƒë·∫ßu ti√™n
                Console.WriteLine("Ki·ªÉm tra tr·∫°ng th√°i n√∫t Previous...");
                var previousButton = driver.FindElement(By.XPath("//li[contains(@class, 'ant-pagination-prev') and contains(@class, 'ant-pagination-disabled')]"));
                var isPreviousDisabled = previousButton.GetAttribute("class").Contains("disabled"); // Gi·∫£ s·ª≠ class "disabled" bi·ªÉu th·ªã tr·∫°ng th√°i kh√¥ng nh·∫•n ƒë∆∞·ª£c
                if (isPreviousDisabled)
                {
                    Console.WriteLine("N√∫t Previous c√≥ m√†u x√°m v√† kh√¥ng th·ªÉ nh·∫•n khi ·ªü trang ƒë·∫ßu ti√™n. [PASS]");
                    status = "Pass";
                }
                else
                {
                    Console.WriteLine("N√∫t Previous c√≥ th·ªÉ nh·∫•n khi ·ªü trang ƒë·∫ßu ti√™n. [FAIL]");
                }

                // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang cu·ªëi c√πng
                Console.WriteLine("ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang cu·ªëi c√πng...");
                var lastPageButton = driver.FindElement(By.XPath("(//li[contains(@class, 'ant-pagination-item') and not(contains(@class, 'ant-pagination-prev')) and not(contains(@class, 'ant-pagination-next'))]//a)[last()]")); // N√∫t ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang cu·ªëi c√πng
                lastPageButton.Click();
                Thread.Sleep(2000);

                // Ki·ªÉm tra n√∫t Next khi ·ªü trang cu·ªëi c√πng
                Console.WriteLine("Ki·ªÉm tra tr·∫°ng th√°i n√∫t Next...");
                var nextButton = driver.FindElement(By.XPath("//li[contains(@class, 'ant-pagination-next') and contains(@class, 'ant-pagination-disabled')]"));
                var isNextDisabled = nextButton.GetAttribute("class").Contains("disabled"); // Gi·∫£ s·ª≠ class "disabled" bi·ªÉu th·ªã tr·∫°ng th√°i kh√¥ng nh·∫•n ƒë∆∞·ª£c
                if (isNextDisabled)
                {
                    Console.WriteLine("N√∫t Next c√≥ m√†u x√°m v√† kh√¥ng th·ªÉ nh·∫•n khi ·ªü trang cu·ªëi c√πng. [PASS]");
                    status ="Pass";
                }
                else
                {
                    Console.WriteLine("N√∫t Next c√≥ th·ªÉ nh·∫•n khi ·ªü trang cu·ªëi c√πng. [FAIL]");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ƒê√£ x·∫£y ra l·ªói: {ex.Message}");
            }

                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Test Logic ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_25", "ƒê∆°n h√†ng v·∫´n c√≥ th·ªÉ thay ƒë·ªïi t√¨nh tr·∫°ng ƒë∆°n h√†ng")]
        public void Test_ChangeStatus_OrderLogic(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                IWebElement? orderRow = null;

                // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒê√£ giao h√†ng" tr√™n b·∫•t k·ª≥ trang n√†o
                while (true)
                {
                    try
                    {
                        // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒê√£ giao h√†ng" tr√™n trang hi·ªán t·∫°i
                        orderRow = driver.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒê√£ giao h√†ng']"));
                        
                        // N·∫øu t√¨m th·∫•y, tho√°t v√≤ng l·∫∑p ƒë·ªÉ x·ª≠ l√Ω
                        Console.WriteLine("ƒê√£ t√¨m th·∫•y ƒë∆°n h√†ng 'ƒê√£ giao h√†ng'");
                        break;
                    }
                    catch (NoSuchElementException)
                    {
                        // N·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng tr√™n trang hi·ªán t·∫°i, ki·ªÉm tra n√∫t chuy·ªÉn trang
                        var nextPageButton = driver.FindElements(By.XPath("//li[contains(@class, 'ant-pagination-next') and not(contains(@class, 'ant-pagination-disabled'))]"));

                        if (nextPageButton.Count > 0)
                        {
                            // Chuy·ªÉn sang trang ti·∫øp theo
                            Console.WriteLine("Kh√¥ng t√¨m th·∫•y tr√™n trang n√†y, chuy·ªÉn sang trang ti·∫øp theo...");
                            nextPageButton[0].Click();
                            Thread.Sleep(2000); 
                        }
                        else
                        {
                            // Kh√¥ng c√≤n trang n√†o ƒë·ªÉ t√¨m
                            Console.WriteLine("Kh√¥ng c√≥ ƒë∆°n h√†ng 'ƒê√£ giao h√†ng' tr√™n t·∫•t c·∫£ c√°c trang.");
                            return; // K·∫øt th√∫c v√¨ kh√¥ng t√¨m th·∫•y
                        }
                    }
                }

                // X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu t√¨m th·∫•y ƒë∆°n h√†ng
                if (orderRow != null)
                {
                    // Nh·∫•n v√†o tr·∫°ng th√°i "ƒê√£ giao h√†ng" ƒë·ªÉ m·ªü dropdown
                    var statusButton = orderRow.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒê√£ giao h√†ng']")); 
                    statusButton.Click();
                    Thread.Sleep(2000);

                    // Ch·ªçn "ƒêang giao h√†ng" t·ª´ danh s√°ch dropdown
                    var inProgressOption = driver.FindElement(By.XPath("//li[contains(@class, 'ant-dropdown-menu-item') and contains(@class, 'ant-dropdown-menu-item-only-child') and @role='menuitem']//span[text()='ƒêang giao h√†ng']"));
                    inProgressOption.Click();
                    Thread.Sleep(2000);
                }

                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Test Logic ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_26", "ƒê∆°n h√†ng v·∫´n c√≥ th·ªÉ thay ƒë·ªïi ph∆∞∆°ng th·ª©c thanh to√°n")]
        public void Test_ChangePayment_OrderLogic(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                IWebElement? orderRow = null;

                // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒê√£ thanh to√°n" tr√™n b·∫•t k·ª≥ trang n√†o
                while (true)
                {
                    try
                    {
                        // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒê√£ thanh to√°n" tr√™n trang hi·ªán t·∫°i
                        orderRow = driver.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒê√£ thanh to√°n']"));
                        
                        // N·∫øu t√¨m th·∫•y, tho√°t v√≤ng l·∫∑p ƒë·ªÉ x·ª≠ l√Ω
                        Console.WriteLine("ƒê√£ t√¨m th·∫•y ƒë∆°n h√†ng 'ƒê√£ thanh to√°n'");
                        break;
                    }
                    catch (NoSuchElementException)
                    {
                        // N·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng tr√™n trang hi·ªán t·∫°i, ki·ªÉm tra n√∫t chuy·ªÉn trang
                        var nextPageButton = driver.FindElements(By.XPath("//li[contains(@class, 'ant-pagination-next') and not(contains(@class, 'ant-pagination-disabled'))]"));

                        if (nextPageButton.Count > 0)
                        {
                            // Chuy·ªÉn sang trang ti·∫øp theo
                            Console.WriteLine("Kh√¥ng t√¨m th·∫•y tr√™n trang n√†y, chuy·ªÉn sang trang ti·∫øp theo...");
                            nextPageButton[0].Click();
                            Thread.Sleep(2000); 
                        }
                        else
                        {
                            // Kh√¥ng c√≤n trang n√†o ƒë·ªÉ t√¨m
                            Console.WriteLine("Kh√¥ng c√≥ ƒë∆°n h√†ng 'ƒê√£ thanh to√°n' tr√™n t·∫•t c·∫£ c√°c trang.");
                            return; 
                        }
                    }
                }

                // X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu t√¨m th·∫•y ƒë∆°n h√†ng
                if (orderRow != null)
                {
                    // Nh·∫•n v√†o tr·∫°ng th√°i "ƒê√£ thanh to√°n" ƒë·ªÉ m·ªü dropdown
                    var statusButton = orderRow.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒê√£ thanh to√°n']")); 
                    statusButton.Click();
                    Thread.Sleep(2000);

                    // Ch·ªçn "Ch∆∞a thanh to√°n" t·ª´ danh s√°ch dropdown
                    var inProgressOption = driver.FindElement(By.XPath("//li[contains(@class, 'ant-dropdown-menu-item') and contains(@class, 'ant-dropdown-menu-item-only-child') and @role='menuitem']//span[text()='Ch∆∞a thanh to√°n']"));
                    inProgressOption.Click();
                    Thread.Sleep(2000);
                }

                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Test Logic ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_27", "C√≥ th·ªÉ c·∫≠p nh·∫≠t thanh to√°n cho ƒë∆°n h√†ng b·ªã hu·ª∑")]
        public void Test_UpdatePayment_CancelledOrder(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                IWebElement? cancelledOrderRow = null;

                // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒê√£ h·ªßy" tr√™n b·∫•t k·ª≥ trang n√†o
                while (true)
                {
                    try
                    {
                        // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒê√£ h·ªßy" tr√™n trang hi·ªán t·∫°i
                        cancelledOrderRow = driver.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒê√£ h·ªßy']"));
                        
                        // N·∫øu t√¨m th·∫•y, tho√°t kh·ªèi v√≤ng l·∫∑p ƒë·ªÉ x·ª≠ l√Ω
                        Console.WriteLine("ƒê√£ t√¨m th·∫•y ƒë∆°n h√†ng 'ƒê√£ h·ªßy'");
                        break;
                    }
                    catch (NoSuchElementException)
                    {
                        // N·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng tr√™n trang hi·ªán t·∫°i, ki·ªÉm tra n√∫t chuy·ªÉn trang
                        var nextPageButton = driver.FindElements(By.XPath("//li[contains(@class, 'ant-pagination-next') and not(contains(@class, 'ant-pagination-disabled'))]"));

                        if (nextPageButton.Count > 0)
                        {
                            // Chuy·ªÉn sang trang ti·∫øp theo
                            Console.WriteLine("Kh√¥ng t√¨m th·∫•y tr√™n trang n√†y, chuy·ªÉn sang trang ti·∫øp theo...");
                            nextPageButton[0].Click();
                            Thread.Sleep(2000);
                        }
                        else
                        {
                            // Kh√¥ng c√≤n trang n√†o ƒë·ªÉ t√¨m
                            Console.WriteLine("Kh√¥ng c√≥ ƒë∆°n h√†ng 'ƒê√£ h·ªßy' tr√™n t·∫•t c·∫£ c√°c trang.");
                            return; // K·∫øt th√∫c v√¨ kh√¥ng t√¨m th·∫•y
                        }
                    }
                }

                // X·ª≠ l√Ω ki·ªÉm tra n·∫øu t√¨m th·∫•y ƒë∆°n h√†ng b·ªã h·ªßy
                if (cancelledOrderRow != null)
                {
                    // Nh·∫•n ƒë·ªÉ m·ªü tr·∫°ng th√°i thanh to√°n
                    var paymentStatusButton = cancelledOrderRow.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell')]//button[contains(@class, 'ant-btn')]//span[contains(text(), 'Ch∆∞a thanh to√°n') or contains(text(), 'ƒê√£ thanh to√°n')]")); 
                    paymentStatusButton.Click();
                    Thread.Sleep(2000);

                    // Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i v√† thay ƒë·ªïi
                    string currentStatus = paymentStatusButton.Text;
                    if (currentStatus == "Ch∆∞a thanh to√°n")
                    {
                        // Ch·ªçn "ƒê√£ thanh to√°n" t·ª´ dropdown
                        var paidOption = driver.FindElement(By.XPath("//li[contains(@class, 'ant-dropdown-menu-item') and contains(@class, 'ant-dropdown-menu-item-only-child') and @role='menuitem']//span[text()='ƒê√£ thanh to√°n']"));
                        paidOption.Click();
                        Thread.Sleep(2000);
                        Console.WriteLine("ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ 'Ch∆∞a thanh to√°n' th√†nh 'ƒê√£ thanh to√°n'.");
                    }
                    else if (currentStatus == "ƒê√£ thanh to√°n")
                    {
                        // Ch·ªçn "Ch∆∞a thanh to√°n" t·ª´ dropdown
                        var unpaidOption = driver.FindElement(By.XPath("//li[contains(@class, 'ant-dropdown-menu-item') and contains(@class, 'ant-dropdown-menu-item-only-child') and @role='menuitem']//span[text()='Ch∆∞a thanh to√°n']"));
                        unpaidOption.Click();
                        Thread.Sleep(2000);
                        Console.WriteLine("ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ 'ƒê√£ thanh to√°n' th√†nh 'Ch∆∞a thanh to√°n'.");
                    }
                    else
                    {
                        Console.WriteLine("Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i thanh to√°n.");
                    }
                }

                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Test Logic ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_28", "T√¨nh tr·∫°ng ƒë∆°n h√†ng v·∫´n thay ƒë·ªïi ƒë∆∞·ª£c b√¨nh th∆∞·ªùng v√† kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o n√†o")]
        public void Test_CannotChangeCancelledOrderStatus(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                IWebElement? cancelledOrderRow = null;

                // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒê√£ h·ªßy" tr√™n b·∫•t k·ª≥ trang n√†o
                while (true)
                {
                    try
                    {
                        // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒê√£ h·ªßy" tr√™n trang hi·ªán t·∫°i
                        cancelledOrderRow = driver.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒê√£ h·ªßy']"));
                        
                        // N·∫øu t√¨m th·∫•y, tho√°t kh·ªèi v√≤ng l·∫∑p ƒë·ªÉ x·ª≠ l√Ω
                        Console.WriteLine("ƒê√£ t√¨m th·∫•y ƒë∆°n h√†ng 'ƒê√£ h·ªßy'");
                        break;
                    }
                    catch (NoSuchElementException)
                    {
                        // N·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng tr√™n trang hi·ªán t·∫°i, ki·ªÉm tra n√∫t chuy·ªÉn trang
                        var nextPageButton = driver.FindElements(By.XPath("//li[contains(@class, 'ant-pagination-next') and not(contains(@class, 'ant-pagination-disabled'))]"));

                        if (nextPageButton.Count > 0)
                        {
                            // Chuy·ªÉn sang trang ti·∫øp theo
                            Console.WriteLine("Kh√¥ng t√¨m th·∫•y tr√™n trang n√†y, chuy·ªÉn sang trang ti·∫øp theo...");
                            nextPageButton[0].Click();
                            Thread.Sleep(2000);
                        }
                        else
                        {
                            // Kh√¥ng c√≤n trang n√†o ƒë·ªÉ t√¨m
                            Console.WriteLine("Kh√¥ng c√≥ ƒë∆°n h√†ng 'ƒê√£ h·ªßy' tr√™n t·∫•t c·∫£ c√°c trang.");
                            return; // K·∫øt th√∫c v√¨ kh√¥ng t√¨m th·∫•y
                        }
                    }
                }

                // X·ª≠ l√Ω ki·ªÉm tra n·∫øu t√¨m th·∫•y ƒë∆°n h√†ng b·ªã h·ªßy
                if (cancelledOrderRow != null)
                {
                    // L·∫•y tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa ƒë∆°n h√†ng
                    var currentStatus = cancelledOrderRow.FindElement(By.XPath("//button[contains(@class, 'ant-btn') and .//span[normalize-space()='ƒê√£ h·ªßy']]")).Text;
                    Console.WriteLine($"Tr·∫°ng th√°i ban ƒë·∫ßu: {currentStatus}");

                    // Nh·∫•n v√†o tr·∫°ng th√°i "ƒê√£ hu·ª∑" ƒë·ªÉ m·ªü dropdown
                    var statusButton = cancelledOrderRow.FindElement(By.XPath("//button[contains(@class, 'ant-btn') and .//span[normalize-space()='ƒê√£ h·ªßy']]")); 
                    statusButton.Click();
                    Thread.Sleep(3000);

                    // Ch·ªçn "ƒê√£ giao h√†ng" t·ª´ danh s√°ch dropdown
                    driver.FindElement(By.XPath("//li[contains(@class, 'ant-dropdown-menu-item') and contains(@class, 'ant-dropdown-menu-item-only-child') and @role='menuitem']//span[text()='ƒê√£ giao h√†ng']")).Click();
                    Thread.Sleep(3000);

                    // Ki·ªÉm tra l·∫°i tr·∫°ng th√°i c·ªßa ƒë∆°n h√†ng
                    var updatedStatus = cancelledOrderRow.FindElement(By.XPath("//li[contains(@class, 'ant-dropdown-menu-item') and contains(@class, 'ant-dropdown-menu-item-only-child') and @role='menuitem']//span[text()='ƒê√£ giao h√†ng']")).Text;
                    Console.WriteLine($"Tr·∫°ng th√°i sau khi th·ª≠ thay ƒë·ªïi: {updatedStatus}");

                    // Ki·ªÉm tra th√¥ng b√°o l·ªói
                    if (updatedStatus == currentStatus)
                    {
                        Console.WriteLine("Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng 'ƒê√£ h·ªßy'. [PASS]");
                    }
                    else
                    {
                        Console.WriteLine("Tr·∫°ng th√°i ƒë√£ b·ªã thay ƒë·ªïi sai. [FAIL]");
                    }
                }

                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Test Logic ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_29", "M√†u s·∫Øc hi·ªÉn th·ªã c·ªßa t·ªïng ti·ªÅn l√† m√†u ƒë·ªè")]
        public void Test_OrderTotalColorIsRed(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                try
                {
                    // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c d√≤ng ƒë∆°n h√†ng
                    var orderRows = driver.FindElements(By.XPath("//tr[contains(@class, 'ant-table-row')]"));

                    // Ki·ªÉm tra xem danh s√°ch ƒë∆°n h√†ng c√≥ tr·ªëng kh√¥ng
                    if (orderRows.Count == 0)
                    {
                        Console.WriteLine("Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o trong danh s√°ch. [FAIL]");
                        return;
                    }

                    Console.WriteLine($"ƒê√£ t√¨m th·∫•y {orderRows.Count} ƒë∆°n h√†ng trong danh s√°ch.");

                    // Ch·ªçn d√≤ng ƒë∆°n h√†ng ƒë·∫ßu ti√™n
                    var firstOrderRow = orderRows[0];

                    // T√¨m c·ªôt ch·ª©a t·ªïng ti·ªÅn trong d√≤ng ƒë∆°n h√†ng
                    var totalAmountCell = firstOrderRow.FindElement(By.XPath("//td[@class='ant-table-cell ant-table-cell-fix-right ant-table-cell-fix-right-first']//span[contains(@style, 'color: red')]"));

                    // Ki·ªÉm tra m√†u s·∫Øc c·ªßa t·ªïng ti·ªÅn
                    var color = totalAmountCell.GetCssValue("color");
                    Console.WriteLine($"M√†u s·∫Øc hi·ªÉn th·ªã c·ªßa t·ªïng ti·ªÅn: {color}");

                    // So s√°nh m√†u v·ªõi m√£ m√†u ƒë·ªè (RGB)
                    if (color == "rgba(255, 0, 0, 1)" || color == "rgb(255, 0, 0)" || color == "red")
                    {
                        Console.WriteLine("T·ªïng ti·ªÅn hi·ªÉn th·ªã ƒë√∫ng m√†u ƒë·ªè. [PASS]");
                        status = "Pass";
                    }
                    else
                    {
                        Console.WriteLine("T·ªïng ti·ªÅn kh√¥ng hi·ªÉn th·ªã m√†u ƒë·ªè. [FAIL]");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"ƒê√£ x·∫£y ra l·ªói: {ex.Message}");
                }

                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Test Th√¥ng b√°o ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_30", "Kh√¥ng c√≥ th√¥ng b√°o")]
        public void Test_UpdateOrderStatus_Notification(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                IWebElement? delivery = null;

                // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i l√† "ƒêang giao h√†ng"
                while (true)
                {
                    try
                    {
                        // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒêang giao h√†ng" tr√™n trang hi·ªán t·∫°i
                        delivery = driver.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒêang giao h√†ng']"));
                        
                        // N·∫øu t√¨m th·∫•y, tho√°t kh·ªèi v√≤ng l·∫∑p ƒë·ªÉ x·ª≠ l√Ω
                        Console.WriteLine("ƒê√£ t√¨m th·∫•y ƒë∆°n h√†ng 'ƒêang giao h√†ng'");
                        break;
                    }
                    catch (NoSuchElementException)
                    {
                        // N·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng tr√™n trang hi·ªán t·∫°i, ki·ªÉm tra n√∫t chuy·ªÉn trang
                        var nextPageButton = driver.FindElements(By.XPath("//li[contains(@class, 'ant-pagination-next') and not(contains(@class, 'ant-pagination-disabled'))]"));

                        if (nextPageButton.Count > 0)
                        {
                            // Chuy·ªÉn sang trang ti·∫øp theo
                            Console.WriteLine("Kh√¥ng t√¨m th·∫•y tr√™n trang n√†y, chuy·ªÉn sang trang ti·∫øp theo...");
                            nextPageButton[0].Click();
                            Thread.Sleep(2000);
                        }
                        else
                        {
                            // Kh√¥ng c√≤n trang n√†o ƒë·ªÉ t√¨m
                            Console.WriteLine("Kh√¥ng c√≥ ƒë∆°n h√†ng 'ƒêang giao h√†ng' tr√™n t·∫•t c·∫£ c√°c trang.");
                            return; // K·∫øt th√∫c v√¨ kh√¥ng t√¨m th·∫•y
                        }
                    }
                }

                // X·ª≠ l√Ω ki·ªÉm tra n·∫øu t√¨m th·∫•y ƒë∆°n h√†ng b·ªã h·ªßy
                if (delivery != null)
                {
                    // Nh·∫•n v√†o tr·∫°ng th√°i "ƒêang giao h√†ng" ƒë·ªÉ m·ªü dropdown
                    var statusButton = delivery.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒêang giao h√†ng']")); 
                    statusButton.Click();
                    Thread.Sleep(2000);

                    // Ch·ªçn "ƒê√£ giao h√†ng" t·ª´ danh s√°ch dropdown
                    var inProgressOption = driver.FindElement(By.XPath("//li[contains(@class, 'ant-dropdown-menu-item') and contains(@class, 'ant-dropdown-menu-item-only-child') and @role='menuitem']//span[text()='ƒê√£ giao h√†ng']"));
                    inProgressOption.Click();
                    Thread.Sleep(2000);
                }

                // Ki·ªÉm tra th√¥ng b√°o th√†nh c√¥ng hi·ªÉn th·ªã
                try
                {
                    // T√¨m ph·∫ßn t·ª≠ th√¥ng b√°o
                    var successNotification = driver.FindElement(By.XPath("//div[contains(@class, 'notification-success')]"));
                    
                    // Ki·ªÉm tra n·ªôi dung th√¥ng b√°o (n·∫øu c√≥)
                    if (successNotification != null && successNotification.Text.Contains("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng"))
                    {
                        Console.WriteLine("Th√¥ng b√°o thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng hi·ªÉn th·ªã ch√≠nh x√°c.");
                    }
                    else
                    {
                        Console.WriteLine("Th√¥ng b√°o thay ƒë·ªïi tr·∫°ng th√°i kh√¥ng hi·ªÉn th·ªã ho·∫∑c n·ªôi dung kh√¥ng ch√≠nh x√°c.");
                    }
                }
                catch (NoSuchElementException)
                {
                    // N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng b√°o trong web, hi·ªÉn th·ªã d√≤ng th√¥ng b√°o gi·∫£ l·∫≠p
                    Console.WriteLine("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng.");
                    status ="Fail";
                }

                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Test Th√¥ng b√°o ƒë∆°n h√†ng")]
        [Category("Order Management")]
        [TestCase("ID_Order_31", "Kh√¥ng c√≥ th√¥ng b√°o")]
        public void Test_CustomerReceivesOrder_ChangeNotification(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ Excel
                string dataTest = ExcelReportRin.GetTestCases("TestCase Rin").FirstOrDefault(tc => tc.Id == testCaseID)?.data;

                if (string.IsNullOrEmpty(dataTest))
                {
                    Console.WriteLine("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ki·ªÉm th·ª≠.");
                    return;
                }

                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

                IWebElement? delivery = null;

                // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i l√† "ƒêang giao h√†ng"
                while (true)
                {
                    try
                    {
                        // T√¨m ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒêang giao h√†ng" tr√™n trang hi·ªán t·∫°i
                        delivery = driver.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒêang giao h√†ng']"));

                        // N·∫øu t√¨m th·∫•y, tho√°t kh·ªèi v√≤ng l·∫∑p ƒë·ªÉ x·ª≠ l√Ω
                        Console.WriteLine("ƒê√£ t√¨m th·∫•y ƒë∆°n h√†ng 'ƒêang giao h√†ng'");
                        break;
                    }
                    catch (NoSuchElementException)
                    {
                        // N·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng tr√™n trang hi·ªán t·∫°i, ki·ªÉm tra n√∫t chuy·ªÉn trang
                        var nextPageButton = driver.FindElements(By.XPath("//li[contains(@class, 'ant-pagination-next') and not(contains(@class, 'ant-pagination-disabled'))]"));

                        if (nextPageButton.Count > 0)
                        {
                            // Chuy·ªÉn sang trang ti·∫øp theo
                            Console.WriteLine("Kh√¥ng t√¨m th·∫•y tr√™n trang n√†y, chuy·ªÉn sang trang ti·∫øp theo...");
                            nextPageButton[0].Click();
                            Thread.Sleep(2000);
                        }
                        else
                        {
                            // Kh√¥ng c√≤n trang n√†o ƒë·ªÉ t√¨m
                            Console.WriteLine("Kh√¥ng c√≥ ƒë∆°n h√†ng 'ƒêang giao h√†ng' tr√™n t·∫•t c·∫£ c√°c trang.");
                            return; // K·∫øt th√∫c v√¨ kh√¥ng t√¨m th·∫•y
                        }
                    }
                }

                // X·ª≠ l√Ω ki·ªÉm tra n·∫øu t√¨m th·∫•y ƒë∆°n h√†ng
                if (delivery != null)
                {
                    // Nh·∫•n v√†o tr·∫°ng th√°i "ƒêang giao h√†ng" ƒë·ªÉ m·ªü dropdown
                    var statusButton = delivery.FindElement(By.XPath("//td[contains(@class, 'ant-table-cell') and contains(@class, 'ant-table-cell-fix-left')]//button[contains(@class, 'ant-btn')]//span[text()='ƒêang giao h√†ng']"));
                    statusButton.Click();
                    Thread.Sleep(2000);

                    // Ch·ªçn "ƒê√£ giao h√†ng" t·ª´ danh s√°ch dropdown
                    var deliveredOption = driver.FindElement(By.XPath("//li[contains(@class, 'ant-dropdown-menu-item') and contains(@class, 'ant-dropdown-menu-item-only-child') and @role='menuitem']//span[text()='ƒê√£ giao h√†ng']"));
                    deliveredOption.Click();
                    Thread.Sleep(2000);
                }

                // Ki·ªÉm tra xem c√≥ th√¥ng b√°o g·ª≠i ƒë·∫øn kh√°ch h√†ng hay kh√¥ng
                try
                {
                    // Ki·ªÉm tra th√¥ng b√°o h·ªá th·ªëng c√≥ g·ª≠i cho kh√°ch h√†ng hay kh√¥ng
                    Console.WriteLine("Ki·ªÉm tra th√¥ng b√°o cho kh√°ch h√†ng...");
                    
                    // B·∫°n c√≥ th·ªÉ th√™m logic gi·∫£ l·∫≠p ·ªü ƒë√¢y, v√≠ d·ª•: "N·∫øu h·ªá th·ªëng kh√¥ng g·ª≠i th√¥ng b√°o"...
                    // Th√¥ng b√°o gi·∫£ l·∫≠p n·∫øu kh√¥ng c√≥ ch·ª©c nƒÉng g·ª≠i th√¥ng b√°o
                    Console.WriteLine("‚ùå H·ªá th·ªëng kh√¥ng g·ª≠i th√¥ng b√°o ƒë·∫øn kh√°ch h√†ng");
                    status = "Fail";
                }
                catch (Exception ex)
                {
                    // N·∫øu c√≥ l·ªói khi ki·ªÉm tra th√¥ng b√°o, hi·ªÉn th·ªã th√¥ng b√°o
                    Console.WriteLine("Kh√¥ng th·ªÉ ki·ªÉm tra th√¥ng b√°o: " + ex.Message);
                    status = "Fail";
                }

                // ƒê√≥ng c·ª≠a s·ªï n·∫øu c√≥ n√∫t ƒë√≥ng
                var closeButton = driver.FindElements(By.XPath("//button[@class='ant-drawer-close'][.//span[contains(@class, 'anticon-close')]]"));
                if (closeButton.Count > 0)
                {
                    closeButton[0].Click();
                    Console.WriteLine("‚úÖ ƒê√£ nh·∫•p v√†o n√∫t ƒë√≥ng");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi tr·∫°ng th√°i test ra Excel n·∫øu c·∫ßn
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Ki·ªÉm tra bi·ªÉu ƒë·ªì hi·ªÉn th·ªã ƒë√∫ng t·ª∑ l·ªá ph∆∞∆°ng th·ª©c thanh to√°n.")]
        [Category("Order Management")]
        [TestCase("ID_Order_32", "Bi·ªÉu ƒë·ªì hi·ªÉn th·ªã ƒë√∫ng")]
        public void Test_PieChart_Payment(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                //Duy·ªát qua t·∫•t c·∫£ c√°c trang ƒë·ªÉ l·∫•y d·ªØ li·ªáu
                Dictionary<string, int> paymentCounts = new Dictionary<string, int>();

                while (true)
                {
                    var orderRows = driver.FindElements(By.XPath("//tbody[@class='ant-table-tbody']/tr"));

                    foreach (var row in orderRows)
                    {
                        try
                        {
                            string paymentMethod = row.FindElement(By.XPath("./td[7]")).Text.Trim();
                            if (paymentCounts.ContainsKey(paymentMethod))
                                paymentCounts[paymentMethod]++;
                            else
                                paymentCounts[paymentMethod] = 1;
                        }
                        catch (NoSuchElementException) { continue; }
                    }

                    // Ki·ªÉm tra n√∫t chuy·ªÉn trang
                    var nextPageButton = driver.FindElements(By.XPath("//li[contains(@class, 'ant-pagination-next') and not(contains(@class, 'ant-pagination-disabled'))]"));

                    if (nextPageButton.Count > 0)
                    {
                        Console.WriteLine("‚û°Ô∏è Chuy·ªÉn sang trang ti·∫øp theo...");
                        nextPageButton[0].Click();
                        Thread.Sleep(2000);
                    }
                    else
                    {
                        Console.WriteLine("‚úÖ ƒê√£ duy·ªát qua t·∫•t c·∫£ c√°c trang.");
                        break; // Kh√¥ng c√≤n trang n√†o ƒë·ªÉ chuy·ªÉn -> Tho√°t v√≤ng l·∫∑p
                    }
                }

                //T√≠nh t·ªïng s·ªë ƒë∆°n h√†ng t·ª´ b·∫£ng
                int paypalOrders = paymentCounts.ContainsKey("Thanh to√°n b·∫±ng paypal") ? paymentCounts["Thanh to√°n b·∫±ng paypal"] : 0;
                int codOrders = paymentCounts.ContainsKey("Thanh to√°n khi nh·∫≠n h√†ng") ? paymentCounts["Thanh to√°n khi nh·∫≠n h√†ng"] : 0;
                int totalOrders = paypalOrders + codOrders;

                Console.WriteLine($"üìå T·ªïng s·ªë ƒë∆°n h√†ng t·ª´ b·∫£ng: {totalOrders}");
                Console.WriteLine($"üìå Thanh to√°n b·∫±ng Paypal: {paypalOrders} ƒë∆°n h√†ng");
                Console.WriteLine($"üìå Thanh to√°n khi nh·∫≠n h√†ng: {codOrders} ƒë∆°n h√†ng");

                //T√≠nh ph·∫ßn trƒÉm t·ª´ng ph∆∞∆°ng th·ª©c thanh to√°n
                double paypalPercentage = totalOrders > 0 ? Math.Round((double)paypalOrders / totalOrders * 100, 0) : 0;
                double codPercentage = totalOrders > 0 ? Math.Round((double)codOrders / totalOrders * 100, 0) : 0;

                Console.WriteLine($"üìä D·ª± ƒëo√°n ph·∫ßn trƒÉm t·ª´ b·∫£ng: Paypal: {paypalPercentage}%, Thanh to√°n khi nh·∫≠n h√†ng: {codPercentage}%");

                //L·∫•y th√¥ng tin t·ª´ Pie Chart
                Thread.Sleep(2000);
                var pieChart = driver.FindElement(By.XPath("//*[@id='root']/div/div/div/div/div[2]/div[2]/div/div[1]/div/div"));
                string pieChartText = pieChart.Text;
                Console.WriteLine("üìä N·ªôi dung Pie Chart: " + pieChartText);

                //So s√°nh ph·∫ßn trƒÉm t·ª´ b·∫£ng v·ªõi Pie Chart
                bool isMatch = pieChartText.Contains($"{paypalPercentage}%") && pieChartText.Contains($"{codPercentage}%");

                if (isMatch)
                {
                    Console.WriteLine($"‚úÖ Bi·ªÉu ƒë·ªì hi·ªÉn th·ªã ƒë√∫ng.");
                    status = "Pass";
                }
                else
                {
                    Console.WriteLine($"‚ùå Sai l·ªách: Pie Chart kh√¥ng kh·ªõp v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi k·∫øt qu·∫£ v√†o Excel
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Ki·ªÉm tra bi·ªÉu ƒë·ªì hi·ªÉn th·ªã khi kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.")]
        [Category("Order Management")]
        [TestCase("ID_Order_33", "Bi·ªÉu ƒë·ªì kh√¥ng hi·ªÉn th·ªã g√¨ c·∫£")]
        public void Test_PieChart_NoOrders(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // Ki·ªÉm tra t·ªïng s·ªë ƒë∆°n h√†ng hi·ªÉn th·ªã
                var orderRows = driver.FindElements(By.XPath("//tbody[@class='ant-table-tbody']/tr"));
                if (orderRows.Count > 0)
                {
                    Console.WriteLine("‚ùå V·∫´n c√≤n ƒë∆°n h√†ng trong b·∫£ng. Testcase th·∫•t b·∫°i!");
                }
                else
                {
                    Console.WriteLine("‚úÖ Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o trong b·∫£ng. Ti·∫øp t·ª•c ki·ªÉm tra bi·ªÉu ƒë·ªì...");
                    
                    // Ki·ªÉm tra Pie Chart
                    var pieChart = driver.FindElements(By.XPath("//*[@id='root']/div/div/div/div/div[2]/div[2]/div/div[1]/div/div"));
                    if (pieChart.Count == 0 || string.IsNullOrEmpty(pieChart[0].Text.Trim()))
                    {
                        Console.WriteLine("‚úÖ Bi·ªÉu ƒë·ªì kh√¥ng hi·ªÉn th·ªã g√¨ c·∫£.");
                        status = "Pass";
                    }
                    else
                    {
                        Console.WriteLine($"‚ùå Bi·ªÉu ƒë·ªì v·∫´n hi·ªÉn th·ªã: {pieChart[0].Text}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi k·∫øt qu·∫£ v√†o Excel
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [Test]
        [Description("Ki·ªÉm tra bi·ªÉu ƒë·ªì hi·ªÉn th·ªã khi ch·ªâ c√≥ 1 ph∆∞∆°ng th·ª©c thanh to√°n.")]
        [Category("Order Management")]
        [TestCase("ID_Order_34", "Bi·ªÉu ƒë·ªì hi·ªÉn th·ªã ƒë√∫ng t·ª∑ l·ªá: 100%")]
        public void Test_PieChart_SinglePaymentMethod(String testCaseID, String thongBao)
        {
            string status = "Fail";
            try
            {
                // B∆∞·ªõc 1: ƒê·∫øm s·ªë l∆∞·ª£ng ƒë∆°n h√†ng theo ph∆∞∆°ng th·ª©c thanh to√°n
                HashSet<string> uniquePayments = new HashSet<string>();
                while (true)
                {
                    var orderRows = driver.FindElements(By.XPath("//tbody[@class='ant-table-tbody']/tr"));

                    foreach (var row in orderRows)
                    {
                        try
                        {
                            string paymentMethod = row.FindElement(By.XPath("./td[7]")).Text.Trim();
                            uniquePayments.Add(paymentMethod);
                        }
                        catch (NoSuchElementException) { continue; }
                    }

                    // Ki·ªÉm tra n√∫t chuy·ªÉn trang
                    var nextPageButton = driver.FindElements(By.XPath("//li[contains(@class, 'ant-pagination-next') and not(contains(@class, 'ant-pagination-disabled'))]"));
                    if (nextPageButton.Count > 0)
                    {
                        Console.WriteLine("‚û°Ô∏è Chuy·ªÉn sang trang ti·∫øp theo...");
                        nextPageButton[0].Click();
                        Thread.Sleep(2000);
                    }
                    else
                    {
                        Console.WriteLine("‚úÖ ƒê√£ duy·ªát qua t·∫•t c·∫£ c√°c trang.");
                        break;
                    }
                }

                // Ki·ªÉm tra n·∫øu ch·ªâ c√≥ 1 ph∆∞∆°ng th·ª©c thanh to√°n
                if (uniquePayments.Count == 1)
                {
                    string onlyPaymentMethod = uniquePayments.First();
                    Console.WriteLine($"‚úÖ T·∫•t c·∫£ ƒë∆°n h√†ng ƒë·ªÅu d√πng ph∆∞∆°ng th·ª©c: {onlyPaymentMethod}.");

                    // Ki·ªÉm tra Pie Chart
                    Thread.Sleep(2000);
                    var pieChart = driver.FindElement(By.XPath("//*[@id='root']/div/div/div/div/div[2]/div[2]/div/div[1]/div/div"));
                    string pieChartText = pieChart.Text;

                    if (pieChartText.Contains("100%"))
                    {
                        Console.WriteLine($"‚úÖ Bi·ªÉu ƒë·ªì hi·ªÉn th·ªã ƒë√∫ng: {onlyPaymentMethod} chi·∫øm 100%.");
                        status = "Pass";
                    }
                    else
                    {
                        Console.WriteLine($"‚ùå Bi·ªÉu ƒë·ªì kh√¥ng hi·ªÉn th·ªã ƒë√∫ng 100%. N·ªôi dung: {pieChartText}");
                    }
                }
                else
                {
                    Console.WriteLine("‚ùå C√≥ nhi·ªÅu h∆°n 1 ph∆∞∆°ng th·ª©c thanh to√°n. Test th·∫•t b·∫°i!");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói: {ex.Message}");
            }

            // Ghi k·∫øt qu·∫£ v√†o Excel
            ExcelReportRin.WriteToExcel("TestCase Rin", testCaseID, status, thongBao);
        }

        [TearDown]
        public void TearDown()
        {
            if (driver != null)
            {
                driver.Quit(); 
                driver.Dispose();
            }
        }
    }
}